# The sequence of triangle numbers is generated by adding the natural numbers. 
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?

# Functions:
# F1. Divisors - Input: n <int>; Output: divs <int> number of divisors of n
# F2. DoubleMaxT - Input: T <list> of triangle numbers; Output: New T <list> of triangle
#     numbers where max(T) is at least doubled.
#
# Main:
# 1. Generate and store triangle list, start from 0 (i.e. 0, 1, 3, 6, 10)
#    Such that T[n] = T[n-1] + n, and T[0] = 0
# 2. Check if the largest one has m divisors
# 3. If not enough, append T until new max(T) is at least double old max(T).  See F2.
#    Repeat until divisors exceed m, now we know the answer is in T somewhere.
#    Apply bisection search

import math
import time

def divisors(n):
    divs = 0
    if math.sqrt(n) % 1 == 0:
        divs += 1
        
    for i in range(1, math.sqrt(n) // 1):
        if n % i == 0:
            divs += 2
            
    return divs
    
def double_max_tri(L):
    tar = max(L) * 2
    while max(L) < tar:
        L.append(max(L) + len(L))
        
    return L

# main
start = time.time()
T = [0, 1, 3, 6, 10]
m = 501     # m = number of divisors we're looking for
searchrange = [0, len(T) - 1]
# lengthen T until answer is included
while divisors(max(T)) < m:
    searchrange[0] = len(T) - 1
    double_max_tri(T)
    searchrange[1] = len(T) - 1
    
#   begin bisection search
#       ngi = next guess index (of T)
ngi = sum(searchrange) // 2
while (searchrange[1] - searchrange[0]) > 1:
    if divisors(T[ngi]) >= m:
        searchrange[1] = ngi
    elif divisors(T[ngi]) < m:
        searchrange[0] = ngi
        
    if divisors(T[ngi]) == m:
        ngi -= 1
    else:
        ngi = sum(searchrange) // 2
    print 'debug: ngi =', ngi, 'divisors(T[ngi])=', divisors(T[ngi]), 'searchrange=', searchrange

ans = T[searchrange[1]]
dur = time.time() - start
print 'ans', ans, 'found in', dur, 'seconds.'
